Channels as Mutual Exclusion Locks

Michael Street
[[https://github.com/MStreet3][github.com/mstreet3]]
[[https://www.linkedin.com/in/michael-street/][linkedin.com]]

[[https://go.dev/][Go]] and [[https://www.rust-lang.org/][Rust]] are two languages that enable concurrent programming.  Go has a number
of concurrency features that are simple to use and elegant to write, but lacks 
much of the compile time concurrency and memory safety checks included in Rust.
This post was inspired by looking at some of the differences between Go and Rust,
but focuses solely on Go.  Particularly, this post examines how to implement a custom
mutual exclusion lock in Go using a struct with a private channel.

* Sharing State in Concurrent Processes

Concurrent programming is a paradigm, in which pieces of software execute
independently of one another.  Software that leverages concurrency to achieve
useful outcomes generally must share state between these independently executing
components.

Sharing state, however, is exactly where concurrent programming can become difficult.
The problems with shared state come down to two main concepts: _mutability_ and 
_ownership_.  Data is _mutable_ if it can be changed.  Data is _owned_ by a process
if only a single process is able to read or mutate it.  Combining mutable state
with poor ownership boundaries leads to incorrect software.  

The purpose of this blog post is to show how Go's `channel` primitive can be
used to implement a mutual exclusion lock ("mutex").  Using a channel requires that
the shared data be passed between goroutines, which allows programs to share state
by communicating rather than sharing state directly.  This technique is not necessarily
practical, safe or useful for most use cases, but can give a deeper understanding
of channels and their power in the Go language.

* Mutual Exclusion

A _mutual_ _exclusion_ _lock_ or _mutex_ for short, is a common tool for claiming
ownership of a piece of shared state in a program.  If multiple software components
execute independently and must access a shared variable (e.g., a bank account balance),
then only the component that holds the lock can read or modify the variable.

The [[https://pkg.go.dev/sync#Mutex][sync]] package in Go provides low-level 
locking features with a simple API:

    var mu sync.Mutex

    mu.Lock() // Locks the mutex.
    // Critical Path .. do something with shared variables
    mu.Unlock() // Unlocks the mutex.

Here is an example of using a mutex to concurrently update the state of a counter
variable to 10:

.play 1_channelmutex.go /STARTMAIN1 OMIT/,/STOPMAIN1 OMIT/

*1* Declare a counter variable that will be modified by concurrent goroutines.

*2* Obtain the mutex lock by calling `Lock`.

*3* Increment the counter in the goroutine after the mutex lock is obtained.

*4* Release the mutex lock to end the critical section that mutates the shared state.

The premise of using a mutex is that concurrent code will have access to the same
shared variables, but can only modify or mutate these variables in the critical
path section between the `Lock` and `Unlock` calls of a single `sync.Mutex`
variable.  The mutex approach is actually well-suited for the simple scenario of 
incrementing a counter, but in the next section we will look at using channels
to implement the required controls on data mutability and ownership.

* Channel as a Mutex

One of the core tenets of Go is:

    Do not communicate by sharing memory; instead, share memory by communicating.

With that in mind, the question becomes: How exactly can we share memory by 
communicating?  To do this we will need to leverage channels, which is the Go
synchronization primitive that enables interprocess communication.

The listing below defines a basic `mutex` type that has an internal `c` field which
is a channel.  We will use the channel's buffer to hold a value of of the generic 
type `T`.  

.code 2_channelmutex.go /STARTMUTEX OMIT/,/STOPMUTEX OMIT/

This `mutex` needs a constructor as we need to build an instance of the internal
channel and ensure that it is buffered. 

.code 2_channelmutex.go /STARTCONSTRUCTOR OMIT/,/STOPCONSTRUCTOR OMIT/

The API of the custom `mutex` type is different than the `sync.Mutex` package and 
expresses the fact that the channel mediates the ownership of the shared value. 
The custom mutex leverages the fact that no goroutine can access a value while 
the value is in the channel's buffer. 

Calling `Lock` on the mutex will read a value from the channel and return it into the
currently executing goroutine. Calling `Unlock` on the mutex will take a value
and place the value into the channel's buffer, which makes the value available 
for another goroutine to read.

We can use this mutex type to make a concurrent counter as well:

.play 2_channelmutex.go /STARTMAIN1 OMIT/,/STOPMAIN1 OMIT/

*1* Declare a new mutex type that wraps the integer value 0.  We have to use the 
`NewMutex` constructor to make our channel mutex because the `nil` channel will 
not work, we must be able to place values into the channel's buffer.  The buffer 
owns the variable between updates and acts as the ownership mediator.

*2* Call the `Lock` method on the mutex to obtain the shared variable.  This
call blocks until the variable is available.

*3* Increment the variable and *4* then unlock the variable via the `Unlock` method by 
returning the variable to the mutex.

*5* We need to now read a value from the mutex by calling `Lock` and placing the
value into a new variable.  

** Downsides and Limitations

The _channel_ _as_ _a_ _mutex_ pattern is not a technique we would regularly use in
practice.  We are demonstrating it here simply to illustrate the point that channels
funnel values between goroutines in such a way that the value can be thought to have
a single owner.  This single owner concept, however, is only a convention.  In 
go it is possible to continue to use a value even after sending it on a channel, 
which can cause dangling pointers and data races so should be avoided.  

.code 2_channelmutex.go /STARTBAD OMIT/,/STOPBAD OMIT/

Aside from that the pattern implemented here has two major drawbacks:

- `nil` value of a `mutex` custom type is useless and causes deadlocks
- cannot pair the `mutex` custom type with a `defer` statement because `defer` statment arguments are evaluated when called

* Conclusions

Concurrent programming is a paradigm, in which pieces of software execute
independently of one another and ultimately resolve a single state of the system
to achieve some goal.  Sharing state correctly under concurrent operations is difficult
and programming languages provide their own philosophies, safe guards and primitive
types to enable developers to write correct software.

Go's primary philosophy on concurrency is that developers should share state by
communicating rather than communicating via shared state.  This mantra is difficult
to understand at first and confusing given the robustness of the `sync` package
provided by the Go standard library.

This blog post digs deeper into the meaning of this phrase by implementing a version
of a mutex lock using channels. This technique of using a channel as a mutex is not 
necessarily practical, safe or useful for most use cases, but can give a deeper understanding
of channels and their power in the Go language.

* Related Reading

- [[https://doc.rust-lang.org/book/ch16-02-message-passing.html][Ch. 16.2: Message Passing (The Rust Book)]]
- [[https://doc.rust-lang.org/book/ch16-00-concurrency.html][Fearless Concurrency (The Rust Book)]]
- [[https://go.dev/doc/effective_go#concurrency][Effective Concurrency in Go]]
